#!/bin/sh

##################
# created 2017-12-27
# by Thomas Frohwein (thfr)
#################
# Script to get FNA-based games
# ready to run on OpenBSD
#
# FNA is a reimplementation of the Microsoft XNA Game Studio 4.0 Refresh libraries.
# Thanks to the great work by Ethan Lee (flibitijibibo) games using FNA are
# highly portable and can even run on OpenBSD.
# Please refer to https://fna-xna.github.io/ for more information about FNA
##################
# Requirements:
#
# - SDL2 library that identifies as 'Linux' rather than 'OpenBSD'
#   (needs to be compiled this way; patch to recognize OpenBSD in
#   progress upstream)
# - mono (package in ports marked as BROKEN, but compiles on amd64
#   if /usr/ports is mounted with wxallowed)
##################
# Usage:
#
# fnaify <launch script>
#
##########
# TODO:
# - [[ ... ]] vs. [ ... ]
# - test that can be invoked without bugs from outside the game folder
# - fix regex for libraries: 'libSDL2.so' -> '.' is regex character (for any)
# - may need to check for duplicates with library names from 'lib64/' folder,
#   too. E.g. cotcidx has both libmono-2.0.so and libmono-2.0.so.1
# - test that fnaify can be invoked repeatedly without getting buggy (same
#   result expected)
# - RCRU: fnaify doesn't check system for libtheorafile
# - fix duplicate appearance of library names (happens with RCRU)
#########

#########
# FUNCTION DEFINITIONS
#########

# printdash: print $1 number of dashes in one line, followed by newline
printdash()
{
	c=1
	while [[ $c -le $1 ]]
	do
		print -n - -
		let c=c+1
	done
	print ""
}

# inarray: check if $1 is in array (reads #2 recursively)
inarray()
{
	if [[ "$#" < 2 ]]
	then
		return 1
	else
		if [[ "$1" = "$2" ]]
		then
			return 0
		fi
		firstarg="$1"
		shift 2
		inarray $firstarg $*
	fi
}

# validlib: returns 0 unless $1 is in ignoredarray, then returns 1
validlib()
{
	ig=1
	while [[ $ig -le ${#ignoredarray[*]} ]]
	do
		if [[ $1 = ${ignoredarray[ig]} ]]
		then
			return 1
		fi
		let ig=ig+1
	done
	return 0
}
		

#######################################################################

#######
# MAIN SCRIPT
#######
print ""
print "Performing initial checks..."
printdash 28
if [[ ! -e "$1" ]]
then
	print "file not found"
	exit 1
fi
print "found file $1"

print "found file type: `file -b \"$1\"`"
if [[ "`file -b \"$1\"`" != "Bourne-Again shell script text executable" ]]
then
	print "file type doesn't fit (expected type 'Bourne-Again shell script text executable')"
	exit 1
fi
print "file type is appropriate"
print "Done with initial checks."
print ""

# variable definitions
fullfnaifypath="$0"
fnaifyfile="`basename \"$fullfnaifypath\"`"
fnaifydir="`dirname \"$fullfnaifypath\"`"
fullscriptpath="`pwd`/$1"
scriptfile="`basename \"$fullscriptpath\"`"
gamedir="`dirname \"$fullscriptpath\"`"
# FIXME: add test that there is only one .exe file, otherwise error out
exefile="`ls \"$gamedir\" | grep \"\.exe$\"`"
fullexepath="$gamedir/$exefile"

for cfile in "`ls \"$gamedir\" | grep \"\.config$\"`"
do
	configfilesarray[${#configfiles[*]} + 1]=$cfile
done

# monofilearray: array of mono files that need to be removed from the game folder
monofilearray[1]="System.dll"
monofilearray[2]="Mono.Posix.dll"
monofilearray[3]="Mono.Security.dll"
monofilearray[4]="System.Configuration.dll"
monofilearray[5]="System.Core.dll"
monofilearray[6]="System.Data.dll"
monofilearray[7]="System.Xml.dll"
monofilearray[8]="System.Security.dll"
monofilearray[9]="System.Runtime.Serialization.dll"
monofilearray[10]="mscorlib.dll"
monofilearray[11]="System.Drawing.dll"
monofilearray[12]="monoconfig"
monofilearray[13]="System.Xml.Linq.dll"
monofilearray[14]="WindowsBase.dll"

# ignoredarray: array of lib names to ignore for the configuration checking
ignoredarray[1]="libCSteamworks.so"
ignoredarray[2]="libsteam_api.so"
ignoredarray[3]="libSteamworksNative.so"

#needlibarray[*] is the array that will hold the names of needed libraries
#foundlibarray[*] is the array of the libraries that were found to match
#                 needlibarray
#missinglibs[*] accumulates missing library names to inform user

####
# identify required libraries
####
# - this is likely imperfect and may identify too many or too few libraries
# - at the moment will check 2 sources: lib64 and .config files
####

print "Identifying libraries required by the game..."

# get library names from lib64 folder
if [[ ! -e "$gamedir/lib64" ]]
then
	print "Couldn't find library directory $gamedir/lib64"
else
	print "Entering library directory $gamedir/lib64"
	# FIXME: not sure if this for statement can deal with whitespace in
	#        filenames
	for file in $(ls "$gamedir/lib64")
	do
		# sort out libs (e.g. steam) that need to be ignored
		validlib $file
		if [[ $? -eq 1 ]]
		then
			continue
		fi
		if [[ "$(file -b $gamedir/lib64/$file)" != "ELF 64-bit LSB shared object, x86-64, version 1" ]]
		then
			print "\tfile $file: not a valid library file type"
		else
			print "\t$file: looks like a Linux shared library"
			needlibarray[${#needlibarray[*]} + 1]=$file
		fi
	done
	print "Done with library directory $gamedir/lib64"
fi

# get library names from .config files
print "Obtaining library names from the following config files"
# check that configfilesarray isn't empty
if [[ ${#configfilesarray[*]} < 1 ]]
then
	print "No config files found."
else
	cfile=""	# empty the variable because it has been used before
	for cfile in ${configfilesarray[*]}
	do
		print "\t$cfile"
		linuxlines="$(grep "os\=\"linux\"" "$gamedir/$cfile")"
		# FIXME: this sed call would probably get messed up if there is
		#	whitespace
		# FIXME: may need to account for *bsd, too
		for libstring in $(print "$linuxlines" | sed -n -E "s/.*target=\"([^\"]+).*/\1/p")
		do
			# Fix where library name includes directory information
			# remove "./" at the beginning of librarynames
			libstring=$(print "$libstring" | sed -E 's/^.\///')
			# remove directories at the start of lib name
			libstring=$(print "$libstring" | sed -E 's/^.*\///')
			print -n "\t\tFound library string: $libstring"
			# sort out libs (e.g. steam) that need to be ignored
			validlib $libstring
			if [[ $? -eq 1 ]]
			then
				print " - ignored"
				continue
			fi
			# check if libstring is already in needlibarray.
			# add to needlibarray only if not.
			if (inarray $libstring ${needlibarray[*]})
			then
				print " - already in array"
			else
				needlibarray[${#needlibarray[*]} + 1]=$libstring
				print " - added to array"
			fi
		done
	done
	print "Done with identifying libraries in config files"
fi
print "Done with identification of needed libraries."

# truncate library names because suffix may be different
print -n "Truncating library names..."
i=1
while [[ i -le ${#needlibarray[*]} ]]
do
	needlibarray[i]=$(print "${needlibarray[i]}" | sed -n -E "s/(.*\.so)\.?.*/\1/p")
	let i=i+1
done
print " done."

# Fix SDL2 filename{,mes}s
print -n "Fixing SDL2 filenames..."
i=1
while [[ i -le ${#needlibarray[*]} ]]
do
	needlibarray[i]=$(print "${needlibarray[i]}" | sed -E "s/(libSDL2.*)-2\.0(\.so.*)/\1\2/")
	let i=i+1
done
print " done."

print -n "Needed libraries: "
print ${needlibarray[*]}
print ""

# Fix libpngXX.so filename
print -n "Fixing libpng filenames..."
i=1
while [[ i -le ${#needlibarray[*]} ]]
do
	needlibarray[i]=$(print "${needlibarray[i]}" | sed -E "s/(libpng1).(\.so.*)/\1.\2/")
	let i=i+1
done
print " done."

# FIXME: find more generic way to fix libpngXX.so, independent of
#	installed and found version

# Check if the libraries are available on the system (/usr/local/lib).
# If not, break and inform user which libraries need to be installed.
print "Checking installed libraries..."

i=1
while [[ i -le ${#needlibarray[*]} ]]
do
	if [[ $(ls /usr/local/lib | grep "^${needlibarray[i]}") != "" ]]
	then
		print "\tfound system lib for: ${needlibarray[i]}"
	else
		print "\tNot found: ${needlibarray[i]}"
		missinglibs[${#missinglibs[*]} + 1]=${needlibarray[i]}
	fi
	let i=i+1
done
print ""

# Check if mono is available
print -n "Checking that mono can be called..."
missingmono=0
whence mono > /dev/null
if [[ $? -ne 0 ]]
then
	print " Couldn't find mono."
	missingmono=1
else
	print " Found mono."
fi
print ""

print -n "Result of configuration testing: "
if [[ ( ${#missinglibs[*]} -gt 0 ) || ( $missingmono -gt 0 ) ]]
then
	print "FAILED"
	printdash 39
	
	print "The following requirements were not met:"
	if [[ $missingmono = 1 ]]
	then
		print -n - -
		print " Could not find 'mono' in PATH"
	fi
	if [[ ${#missinglibs[*]} > 0 ]]
	then
		i=1
		while [[ i -le ${#missinglibs[*]} ]]
		do
			print -n - -
			print " Could not find library: ${missinglibs[i]}"
			let i=i+1
		done
	fi
	print ""
	exit 1
fi
print "SUCCEEDED"

####
# replace all occurences of 'linux' in .config files (dllmap) with 'openbsd'
#    (this won't be needed after fna 18.01+ rolled out)

print ""
print "Adjusting config files for OpenBSD..."

# create backup .linux files of the original .config files
print -n "\t(creating copy of original config files with suffix '.linux')... "
for file in $(ls "$gamedir" | grep "\.config$")
do
	if [[ ! -e "$gamedir/$file.linux" ]]
	then
		cp -p "$gamedir/$file" "$gamedir/$file.linux"
	fi
done
print "done."

# now replace all terms in *.config
for file in $(ls "$gamedir" | grep "\.config$")
do
	# someone may be able to provide a more compact solution for this section
	# remove "./" at the beginning of any target="..."
	sed -i -E 's/(.*target=")\.\/(.*)$/\1\2/g' "$gamedir/$file"
	# remove directory lib{,64} at the start of any target="..."
	sed -i -E 's/(.*target=")lib(64)?\/(.*)$/\1\3/g' "$gamedir/$file"
	sed -i 's/os="linux"/os="openbsd"/g' "$gamedir/$file"
	# remove suffix numbers
	sed -i -E 's/(target="lib.*.so)[\.0-9]*(.*)$/\1\2/g' "$gamedir/$file"
	# fix SDL2 naming by removing the '-2.0'
	sed -i -E 's/(target="libSDL2.*)-2\.0(\.so.*)$/\1\2/g' "$gamedir/$file"
	# FIXME: find out where 'dll=' is used with .so and how often
	# 	(there was an example with libfreetype in this place somewhere)
	sed -i -E 's/(dll="lib[a-zA-Z]*\.so)[\.0-9]*(.*)$/\1\2/g' "$gamedir/$file"
done
print "Config files adjusted."

# Move interfering mono files out of the way
print -n "Moving some bundled dll files into linux-dlls subfolder... "
i=1
while [[ i -le ${#monofilearray[*]} ]]
do
	if [[ -e "$gamedir/${monofilearray[i]}" ]]
	then
		if [[ ! -e "$gamedir/linux-dlls" ]]
		then
			mkdir "$gamedir/linux-dlls"
		fi
		mv "$gamedir/${monofilearray[i]}" "$gamedir/linux-dlls"
	fi
	let i=i+1
done
print " done."

###
# copy wrapper script template into the game folder, set correct .exe in script, and set to executable
#
#    FIXME: Hacknet needs -disableweb flag

print "Replacing launcher script with OpenBSD variant."
# if not exists, make backup of original script for linux
print -n "\t(creating copy of original launcher script with suffix '.linux')... "
if [ ! -e "$fullscriptpath.linux" ]
then
	cp -p "$fullscriptpath" "$fullscriptpath.linux"
fi
print "done."
cp "$fnaifydir/wrapper.template" "$fullscriptpath"
if [[ $scriptfile = "Hacknet" ]]
then
	sed -i "s/<WINDOWS_EXECUTABLE>/\"$exefile\" -disableweb/g" "$fullscriptpath"
else
	sed -i "s/<WINDOWS_EXECUTABLE>/\"$exefile\"/g" "$fullscriptpath"
fi
chmod +x "$fullscriptpath"
print "Launcher script replaced."
print ""
print "Setup complete. You should now be able to start the game by running $fullscriptpath."
