#!/bin/sh

##################
# created 2017-12-27
# by Thomas Frohwein (thfr)
#################
# Script to get FNA-based games
# ready to run on OpenBSD
#
# FNA is a reimplementation of the Microsoft XNA Game Studio 4.0 Refresh libraries.
# Thanks to the great work by Ethan Lee (flibitijibibo) games using FNA are
# highly portable and can even run on OpenBSD.
# Please refer to https://fna-xna.github.io/ for more information about FNA
##################
# Requirements:
#
# - SDL2 library that identifies as 'Linux' rather than 'OpenBSD'
#   (needs to be compiled this way; patch to recognize OpenBSD in
#   progress upstream)
# - mono (package in ports marked as BROKEN, but compiles on amd64
#   if /usr/ports is mounted with wxallowed)
##################
# Usage:
#
# fnaify <launch script>
#
##########
# TODO:
# - test that can be invoked without bugs from outside the game folder
# - fix regex for libraries: 'libSDL2.so' -> '.' is regex character (for any)
# - test that fnaify can be invoked repeatedly without getting buggy (same
#   result expected)
# - fix duplicate appearance of library names (happens with RCRU)
# - currently assumes that there is only one .exe file in the game's folder
#   - this should at least throw an error and exit if there's more than 1
#   (RELATED: fix: sed: 1: "s/<WINDOWS_EXECUTABLE>/ ...: unescaped newline inside substitute pattern
#   e.g. occuring with Hive, super rad raygun)
# - libXNAFileDialog is on ignoredarray because non-essential and cannot test
#   if it works. Remove from ignoredarray after testing (TowerFall: Ascension ADD-ON)
# - read monofilearray and ignoredarray in from files (while IFS= read -r line; do ... done <"filename")
# - detect bad FNA.dll versions and complain and/or exchange them (e.g. with hash or size) (monodis --assembly FNA.dll | grep Version)
# - set to take game directory as the argument rather than the script
# - go through FIXME's
# - make launcher script have generic, neutral name, like 'runfna'
# - currently, ignoredarray needs version of libfmod{,studio}.so.10. fix it so this isn't needed
#########

#########
# Problematic FNA.dll versions:
#########
# - FNA.dll 15.12.21.0 (apotheon)
# - FNA.dll 0.0.0.1 (shuggy, wizorb, wyv and keep)
# - FNA.dll 16.1.0.0 (brushwood)
# - FNA.dll 16.3.0.0 (rex rocket)
#########

# Working:
# MonoGame.Framework.dll 0.0.0.0 (StardewValley)
# MonoGame.Framework.dll 3.0.0.0 (AVNT, Capsized, EscapeGoat, Rogue Legacy, Soulcaster1&2)
# MonoGame.Framework.dll 3.1.2.0 (EscapeGoat2, Gateways, Skulls of the Shogun)
# FNA.dll 16.5.0.0 (bleed ((super rad raygun))
# FNA.dll 16.7.0.0 (TowerFall: Ascension)
# FNA.dll 16.8.0.0 (Paladin, Shipwreck)
# FNA.dll 16.11.0.0 (FEZ)
# FNA.dll 16.12.0.0 (Overdriven Reloaded, Square Heroes)
# FNA.dll 17.2.0.0 (Hacknet)
# FNA.dll 17.3.0.0 (Salt&Sanctuary, ((Terraria)))
# FNA.dll 17.5.0.0 (Hidden in Plain Sight)
# FNA.dll 17.6.0.0 (bleed2, dust-aet, press x to not die)
# FNA.dll 17.9.0.0 (Charlie Murder, The Dishwasher: Vampire Smile, ((MidBoss)))
# FNA.dll 17.11.0.0 (Flinthook, RCRU)
# FNA.dll 17.12.0.0 (cotcidx, Hyphen, owlboy)

#########
# VARIABLE AND FUNCTION DEFINITIONS
#########

SAVEIFS=$IFS

# monofilearray: array of mono files that need to be removed from the game folder
monofilearray[1]="System.dll"
monofilearray[2]="Mono.Posix.dll"
monofilearray[3]="Mono.Security.dll"
monofilearray[4]="System.Configuration.dll"
monofilearray[5]="System.Core.dll"
monofilearray[6]="System.Data.dll"
monofilearray[7]="System.Xml.dll"
monofilearray[8]="System.Security.dll"
monofilearray[9]="System.Runtime.Serialization.dll"
monofilearray[10]="mscorlib.dll"
monofilearray[11]="System.Drawing.dll"
monofilearray[12]="monoconfig"
monofilearray[13]="System.Xml.Linq.dll"
monofilearray[14]="WindowsBase.dll"
monofilearray[15]="monomachineconfig"
monofilearray[16]="I18N.CJK.dll"
monofilearray[17]="I18N.MidEast.dll"
monofilearray[18]="I18N.Other.dll"
monofilearray[19]="I18N.Rare.dll"
monofilearray[20]="I18N.West.dll"
monofilearray[21]="I18N.dll"
monofilearray[22]="Microsoft.CSharp.dll"
monofilearray[23]="Mono.CSharp.dll"
monofilearray[24]="System.ServiceModel.dll"

# ignoredarray: array of lib names to ignore for the configuration checking
ignoredarray[1]="libCSteamworks.so"
ignoredarray[2]="libsteam_api.so"
ignoredarray[3]="libSteamworksNative.so"
ignoredarray[4]="libcef.so"
ignoredarray[5]="libXNAWebRenderer.so"
ignoredarray[6]="libSteamWrapper.so"
ignoredarray[7]="libParisSteam.so"
ignoredarray[8]="steamwrapper.so"
ignoredarray[9]="libCommunityExpressSW.so"
ignoredarray[10]="libXNAFileDialog.so"
ignoredarray[11]="libfmod.so.10"
ignoredarray[12]="libfmodstudio.so.10"

#needlibarray[*] is the array that will hold the names of needed libraries
#foundlibarray[*] is the array of the libraries that were found to match
#                 needlibarray
#missinglibs[*] accumulates missing library names to inform user

# printdash: print $1 number of dashes in one line, followed by newline
printdash()
{
	c=1
	while [[ $c -le $1 ]]
	do
		print -n - -
		let c=c+1
	done
	print ""
}

# inarray: check if $1 is in array $2 (with simple grep)
inarray()
{
	firstarg="$1"
	shift 1
	print "$*" | fgrep -q "$firstarg"
	return
}

# validlib: returns 0 unless $1 is in ignoredarray, then returns 1
# FIXME: this won't be able to deal with whitespace at the moment
validlib()
{
	ig=1
	while [[ $ig -le ${#ignoredarray[*]} ]]
	do
		if [[ $1 = ${ignoredarray[ig]} ]]
		then
			return 1
		fi
		let ig=ig+1
	done
	return 0
}

# trunklibnam: truncate the name of the library (and remove '-2.0') to match OpenBSD
trunklibnam()
{
	libnam="$1"
	libnam="$(print "$libnam" | sed -n -E "s/(.*\.so)\.?.*/\1/p")"
	libnam="$(print "$libnam" | sed -E "s/(libSDL2[^-]*)-2\.0(\.so.*)/\1\2/")"
	print "$libnam"
}

#######################################################################

#######
# MAIN SCRIPT
#######
print ""
print "Performing initial checks..."
printdash 28
if [[ ! -e "$1" ]]
then
	print "file not found"
	exit 1
fi
print "found file $1"

# FIXME: make independent of the useless bash script (just take directory as parameter, if any)
# FIXME: need to make sure that no important file is changed
print "found file type: `file -b \"$1\"`"
print "Done with initial checks."
print ""

# path and file variable definitions
fullfnaifypath="$0"
fnaifyfile="`basename \"$fullfnaifypath\"`"
fnaifydir="`dirname \"$fullfnaifypath\"`"
fullscriptpath="`pwd`/$1"
scriptfile="`basename \"$fullscriptpath\"`"
gamedir="`dirname \"$fullscriptpath\"`"
# FIXME: add test that there is only one .exe file, otherwise error out
IFS="
"
for xfile in $(ls "$gamedir" | grep "\.exe$")
do
	exefile[${#exefile[*]} + 1]=$xfile
done
#exefile="`ls \"$gamedir\" | grep \"\.exe$\"`"
IFS=$SAVEIFS

#fullexepath="$gamedir/$exefile" # likely not needed and can be removed

# configfilesarray: array of files in gamedir ending in '.config'
print "Identifying config files..."
IFS="
"
for cfile in $(ls "$gamedir" | grep "\.config$")
do
	print "\tfound config file: $cfile"
	configfilesarray[${#configfilesarray[*]} + 1]="$cfile"
done
IFS=$SAVEIFS
print "Done identifying config files."
print ""

####
# identify required libraries
####
# - this is likely imperfect and may identify too many or too few libraries
# - at the moment will check 2 sources: lib64 and .config files
# - filenames not whitespace-safe, but should not be used in such files anyway
####

print "Identifying libraries required by the game..."
printdash 45

# get library names from lib64 folder
print ""
if [[ ! -e "$gamedir/lib64" ]]
then
	print "Couldn't find library directory $gamedir/lib64"
else
	print "Entering library directory $gamedir/lib64"
	for file in $(ls "$gamedir/lib64")
	do
		# sort out libs (e.g. steam) that need to be ignored
		validlib $file
		if [[ $? -eq 1 ]]
		then
			continue
		fi
		print -n "\tfound library file: $file"
		file=$(trunklibnam "$file")
		print " -> $file"
		inarray $file ${needlibarray[*]}
		if [[ $? -eq 0 ]]
		then
			print " - already in array"
		elif [[ $? -eq 1 ]]
		then
			needlibarray[${#needlibarray[*]} + 1]=$file
		else
			print "\n\t - ERROR: inarray returned with unexpected error"
			exit 1
		fi
	done
	print "Done with library directory $gamedir/lib64"
fi

# get library names from lib folder
print ""
if [[ ! -e "$gamedir/lib" ]]
then
	print "Couldn't find library directory $gamedir/lib"
else
	print "Entering library directory $gamedir/lib"
	for file in $(ls "$gamedir/lib")
	do
		# sort out libs (e.g. steam) that need to be ignored
		validlib $file
		if [[ $? -eq 1 ]]
		then
			continue
		fi
		print -n "\tfound library file: $file"
		file=$(trunklibnam "$file")
		print -n " -> $file"
		inarray $file ${needlibarray[*]}
		if [[ $? -eq 0 ]]
		then
			print " - already in array"
		elif [[ $? -eq 1 ]]
		then
			needlibarray[${#needlibarray[*]} + 1]=$file
			print ""
		else
			print "\n\t - ERROR: inarray returned with unexpected error"
			exit 1
		fi
	done
	print "Done with library directory $gamedir/lib"
fi

# get library names from .config files
print "Obtaining library names from the following config files"

# check that configfilesarray isn't empty
if [[ ${#configfilesarray[*]} < 1 ]]
then
	print "No config files found."
else
	cfile=""	# empty the variable because it has been used before
	IFS="
	"
	for cfile in ${configfilesarray[*]}
	do
		print "\t$cfile"
		linuxlines=$(grep "os\=\"linux" $gamedir/$cfile)
		# FIXME: this sed call would probably get messed up if there is
		#	whitespace
		for libstring in $(print "$linuxlines" | sed -n -E "s/.*target=\"([^\"]+).*/\1/p")
		do
			# Fix where library name includes directory information
			# remove "./" at the beginning of librarynames
			libstring=$(print "$libstring" | sed -E 's/^.\///')
			# remove directories at the start of lib name
			libstring=$(print "$libstring" | sed -E 's/^.*\///')
			print -n "\t\tFound library string: $libstring"
			# sort out libs (e.g. steam) that need to be ignored
			validlib $libstring
			if [[ $? -eq 1 ]]
			then
				print " - ignored"
				continue
			fi
			# truncate/fix SDL2 names{,s}
			libstring=$(trunklibnam "$libstring")
			print -n " -> $libstring"
			#needlibarray[${#needlibarray[*]} + 1]=$libstring
			# check if libstring is already in needlibarray.
			# add to needlibarray only if not.
			inarray $libstring ${needlibarray[*]}
			if [[ $? -eq 0 ]]
			then
				print " - already in array"
			elif [[ $? -eq 1 ]]
			then
				needlibarray[${#needlibarray[*]} + 1]=$libstring
				print " - added to array"
			else
				print "\n\t - ERROR: inarray returned with unexpected error"
				exit 1
			fi
		done
	done
	print "Done with identifying libraries in config files"
fi
print "Done with identification of needed libraries."
IFS=$SAVEIFS

# Fix libpngXX.so filename
print -n "Fixing libpng filenames if present..."
i=1
while [[ i -le ${#needlibarray[*]} ]]
do
	needlibarray[i]=$(print "${needlibarray[i]}" | sed -E "s/(libpng)..(\.so.*)/\1\2/")
	let i=i+1
done
print " done."
print ""

# Check if the libraries are available on the system (/usr/local/lib).
# If not, break and inform user which libraries need to be installed.
print "Checking installed libraries..."

i=1
while [[ i -le ${#needlibarray[*]} ]]
do
	if [[ $(ls /usr/local/lib | grep "^${needlibarray[i]}") != "" ]]
	then
		print "\tfound system lib for: ${needlibarray[i]}"
	else
		if print ${needlibarray[i]} | grep -q 'libfreetype\.so.*'
		then
			# DEBUG
			print "\tfound libfreetype (see /usr/X11R6/lib)"
		else
			print "\tNot found: ${needlibarray[i]}"
			missinglibs[${#missinglibs[*]} + 1]=${needlibarray[i]}
		fi
	fi
	let i=i+1
done
print ""

# Check if mono is available
print -n "Checking that mono can be called..."
missingmono=0
whence mono > /dev/null
if [[ $? -ne 0 ]]
then
	print " Couldn't find mono."
	missingmono=1
else
	print " Found mono."
fi
print ""

print -n "Result of configuration testing: "
if [[ ( ${#missinglibs[*]} -gt 0 ) || ( $missingmono -gt 0 ) ]]
then
	print "FAILED"
	printdash 39
	
	print "The following requirements were not met:"
	if [[ $missingmono = 1 ]]
	then
		print -n - -
		print " Could not find 'mono' in PATH"
	fi
	if [[ ${#missinglibs[*]} > 0 ]]
	then
		i=1
		while [[ i -le ${#missinglibs[*]} ]]
		do
			print -n - -
			print " Could not find library: ${missinglibs[i]}"
			let i=i+1
		done
	fi
	print ""
	exit 1
fi
print "SUCCESS"
printdash 40

####
# replace all occurences of 'linux' in .config files (dllmap) with 'openbsd'
#    (this won't be needed after fna 18.01+ rolled out)

print ""
print "Adjusting config files for OpenBSD..."

# create backup .linux files of the original .config files
# (unless this has already been done; then don't overwrite)
print -n "\t(creating copy of original config files with suffix '.linux')... "
IFS="
"
for file in $(ls "$gamedir" | grep "\.config$")
do
	if [[ ! -e "$gamedir/$file.linux" ]]
	then
		cp -p "$gamedir/$file" "$gamedir/$file.linux"
	fi
done
IFS=$SAVEIFS
print "done."

# now replace all terms in *.config
IFS="
"
for file in $(ls "$gamedir" | grep "\.config$")
do
	# someone may be able to provide a more compact solution for this section
	# remove "./" at the beginning of any target="..."
	sed -i -E 's/(.*target=")\.\/(.*)$/\1\2/g' "$gamedir/$file"
	# remove directory lib{,64} at the start of any target="..."
	sed -i -E 's/(.*target=")lib(64)?\/(.*)$/\1\3/g' "$gamedir/$file"
	sed -i 's/os="linux/os="openbsd/g' "$gamedir/$file"
	# remove suffix numbers
	sed -i -E 's/(target="lib.*.so)[\.0-9]*(.*)$/\1\2/g' "$gamedir/$file"
	# fix SDL2 naming by removing the '-2.0'
	sed -i -E 's/(target="libSDL2.*)-2\.0(\.so.*)$/\1\2/g' "$gamedir/$file"
	# FIXME: find out where 'dll=' is used with .so and how often
	# 	(there was an example with libfreetype in this place somewhere)
	sed -i -E 's/(dll="lib[a-zA-Z]*\.so)[\.0-9]*(.*)$/\1\2/g' "$gamedir/$file"
done
IFS=$SAVEIFS
print "Config files adjusted."

# Move interfering mono files out of the way
print -n "Moving some bundled dll files into linux-files subfolder... "
i=1
while [[ i -le ${#monofilearray[*]} ]]
do
	if [[ -e "$gamedir/${monofilearray[i]}" ]]
	then
		if [[ ! -e "$gamedir/linux-files" ]]
		then
			mkdir "$gamedir/linux-files"
		fi
		mv "$gamedir/${monofilearray[i]}" "$gamedir/linux-files"
	fi
	let i=i+1
done
print " done."

###
# copy wrapper script template into the game folder, set correct .exe in script, and set to executable

if [[ ${#exefile[*]} -gt 1 ]]
then
	i=0
	while [[ ++i -le ${#exefile[*]} ]]
	#for i in {1..${#exefile[*]}}
	do
		print "$i: ${exefile[i]}"
	done
	print -n "Enter number of .exe file to choose for wrapper script: "
	# FIXME: this breaks with error when whitespace in input
	while [[ $input -lt 1 || $input -gt ${#exefile[*]} ]]
	do
		read input
	done
	selectexe="${exefile[$input]}"
elif
then
	selectexe="${exefile[1]}"
else
	print "ERROR: no .exe file found"
	exit 1
fi

print "Replacing launcher script with OpenBSD variant."
# if not exists, make backup of original script for linux
print -n "\t(creating copy of original launcher script with suffix '.linux')... "
if [ ! -e "$fullscriptpath.linux" ]
then
	cp -p "$fullscriptpath" "$fullscriptpath.linux"
fi
print "done."
cp "$fnaifydir/wrapper.template" "$fullscriptpath"
if [[ $scriptfile = "Hacknet" ]]
then
	sed -i "s/<WINDOWS_EXECUTABLE>/\"$selectexe\" -disableweb/g" "$fullscriptpath"
else
	sed -i "s/<WINDOWS_EXECUTABLE>/\"$selectexe\"/g" "$fullscriptpath"
fi
chmod +x "$fullscriptpath"
print "Launcher script replaced."
print ""
print "Setup complete. You should now be able to start the game by running $fullscriptpath."
